library(here)
here("/R")
here
here()
here(/R)
here("R")
library(here)
library(here)
library(here)
library(igraph)
library(fastDummies)
library(dplyr)
library(Matrix)
report = read.csv(here("R"))
report = read.csv(here("R/report.csv"))
#todos los servicios del reporte
services = unique(report$service)
#para obtener cada id con su servicio y el servicio del (o los) parent(s)
report_detailed1 = merge(x = report[, c("id", "thread", "service", "parent1")],
y = report[, c("id", "thread", "service")],
by.x = "parent1",
by.y = "id",
suffixes = c("", "_parent"))
report_detailed2 = merge(x = report[, c("id", "thread", "service", "parent2")],
y = report[, c("id", "thread", "service")],
by.x = "parent2",
by.y = "id",
suffixes = c("", "_parent"))
report_detailed1 = report_detailed1[report_detailed1$thread != report_detailed1$thread_parent, ]
report_detailed2 = report_detailed2[report_detailed2$thread != report_detailed2$thread_parent, ]
report_detailed = rbind(report_detailed1[, c("id", "service", "service_parent")],
report_detailed2[, c("id", "service", "service_parent")])
for_adjacency = dummy_cols(report_detailed,
select_columns = c("service_parent"))
names(for_adjacency) <- sub("service_parent_", "", names(for_adjacency))
adjacency = for_adjacency %>% group_by(service) %>% summarise_if(is.numeric, sum)
adjacency = as.matrix(adjacency[, -1])
#tamaño de los vértices
services_size = for_adjacency %>% group_by(service) %>% summarise(service_size = n())
vertex_size = as.matrix(services_size$service_size)[, 1] * 2
vertex_label_dist = c() #la separación de las etiquetas de los vértices
self_edge_rotation = c() #la rotación de las aristas que salen y caen en el mismo nodo
edge_label = c() #las etiquetas de las aristas (cuando son necesarias)
edge_curved_value = c() #la curvatura de las aristas (cuando es necesaria)
rotation = 0 #la rotación de las aristas propias es acumulativa, comienza en cero
#este proceso llena estratégicamente los arrays de valores
for(i in 1:length(services)){
vertex_label_dist = c(vertex_label_dist, 3 + 7 * vertex_size[i] / max(vertex_size))
for(j in 1:length(services)){
if(adjacency[i, j] != 0){
if(i == j){
self_edge_rotation = c(self_edge_rotation, - (i-1) * 2 * pi / length(services))
}else{
self_edge_rotation = c(self_edge_rotation, 0)
}
if (adjacency[i, j] > 1) {
edge_curved_value = c(edge_curved_value, 0.1)
edge_label = c(edge_label, adjacency[i, j])
} else{
edge_label = c(edge_label, "")
if (adjacency[j, i] > 1) {
edge_curved_value = c(edge_curved_value, 0.1)
} else {
edge_curved_value = c(edge_curved_value, 0)
}
}
}
}
}
#función para la rotación de las etiquetas de vértices
#este código salió de (colocar fuente)
radian.rescale <- function(x, start=0, direction=1) {
c.rotate <- function(x) (x + start) %% (2 * pi) * direction
c.rotate(scales::rescale(x, c(0, 2 * pi), range(x)))
}
lab.locs <- radian.rescale(x=1:length(services), direction=-1, start=0)
graph = graph_from_adjacency_matrix(adjacency, mode = "directed", weighted = TRUE)
plot(graph,
vertex.size = vertex_size,
layout = layout.circle(graph),
margin = 0,
edge.arrow.size = 0.15,
edge.label.font = 2,
edge.label.color = 'black',
vertex.label.color = 'black',
vertex.color = 'yellow',
vertex.label.cex = 0.6,
edge.label.cex = 0.6,
vertex.label.dist = vertex_label_dist,
edge.loop.angle = self_edge_rotation,
edge.label = edge_label,
edge.curved = edge_curved_value,
vertex.label.degree = lab.locs)
report_adjacency_matrix <- function(report) {
#----PRIMER PASO: TRANSFORMAR ADECUADAMENTE LOS DATOS
#obtener todos los servicios del reporte
services = unique(report$service)
#obtener cada id con su servicio y el servicio del (o los) parent(s)
report_detailed1 = merge(x = report[, c("id", "thread", "service", "parent1")],
y = report[, c("id", "thread", "service")],
by.x = "parent1",
by.y = "id",
suffixes = c("", "_parent"))
report_detailed2 = merge(x = report[, c("id", "thread", "service", "parent2")],
y = report[, c("id", "thread", "service")],
by.x = "parent2",
by.y = "id",
suffixes = c("", "_parent"))
report_detailed1 = report_detailed1[report_detailed1$thread != report_detailed1$thread_parent, ]
report_detailed2 = report_detailed2[report_detailed2$thread != report_detailed2$thread_parent, ]
report_detailed = rbind(report_detailed1[, c("id", "service", "service_parent")],
report_detailed2[, c("id", "service", "service_parent")])
#dos casos problemáticos: servicios que no son parents o parents que no son servicios
no_service = report_detailed$service_parent[!(report_detailed$service_parent %in% report_detailed$service)]
no_service_parents = report_detailed$service[!(report_detailed$service %in% report_detailed$service_parent)]
#si existen estos casos, con estos servicios deben hacerse ligeras modificaciones para no alterar la matriz de adyacencias
for (service in no_service_parents) { #primer caso problemático: un servicio que no es parent
report_detailed[nrow(report_detailed) + 1, ] = c("fake_id", service, service)
}
#----SEGUNDO PASO: GENERAR LA MATRIZ DE ADYACENCIAS
for_adjacency = dummy_cols(report_detailed,
select_columns = c("service_parent"))
names(for_adjacency) <- sub("service_parent_", "", names(for_adjacency))
#continuación del primer caso problemático
for_adjacency[for_adjacency$id == "fake_id", 4:ncol(for_adjacency)] = matrix(0, sum(for_adjacency$id == 'fake_id'), ncol(for_adjacency) - 3)
#obtener la matriz de adyacencias mediante agrupación de las dummy cols
adjacency = as.data.frame(for_adjacency %>% group_by(service) %>% summarise_if(is.numeric, sum))
#segundo caso problemático: un parent que no es servicio
for (service in no_service){
adjacency[nrow(adjacency) + 1, ] <- c(service, rep(0, ncol(adjacency) - 1))
}
#ordenar la matriz para que las filas coincidan con las columnas (es decir, asegurarse de que efectivamente es la matriz de adyacencias)
adjacency = adjacency[, c(1, match(colnames(adjacency)[2:ncol(adjacency)], unique(adjacency$service)) + 1)]
return(as.matrix(adjacency[, -1]))
}
report_adjacency_matrix(here("R/report.csv"))
report_adjacency_matrix(report)
plot_traces <- function(table_features) {
n = nrow(table_features) #número de eventos en el reporte
times = (table_features[, 'hrt'] - table_features[1, 'hrt']) / 1000000
unique_processes = unique(table_features[, 'service']) #services únicos en el reporte
unique_threads = unique(table_features[, 'thread'])
#información de los threads para separarlos según el servicio al que pertenecen (el color es para graficarlos)
group_threads = c()
color_threads = c()
colors_rgb = c()
for (i in 1:length(unique_processes)){
threads = unique((table_features %>% filter(service == unique_processes[i]))[, 'thread'])
group_threads = c(group_threads, threads)
color_threads = c(color_threads, rep(i, length(threads)))
colors_rgb = c(colors_rgb, rgb(runif(1), runif(1), runif(1), alpha = 0.35))
}
#coordenadas verticales para la gráfica (cada coordenada corresponde a un thread)
y = c()
for (i in 1:length(unique_threads)){
index = which(table_features[, 'thread'] %in% group_threads[i])
y[index] = length(unique_threads) - i + 1
}
par(mar = c(2, 7, 2, 9), xpd=TRUE)
plot(1, type = 'n', ylim = c(0, length(unique_threads) + 1), xlim = c(-5, 5 + tail(times, n = 1)), ylab = '', yaxt = 'n')
ytick<-seq(1, length(unique_threads), by = 1)
axis(side = 2, at = ytick, labels = FALSE)
text(par("usr")[1], ytick, labels = rev(group_threads), pos = 2, xpd = TRUE)
#se grafican líneas para representar las conexiones con los parents
for (i in 2:n){
#para el primer parent
index = which(table_features[, 'id'] %in% table_features[i, 'parent1']) #índice del parent
x_values = c(times[index], times[i])
y_values = c(y[index], y[i])
points(x_values, y_values, col='black', lwd = 0.1, pch = 20) #se grafica el punto de padre e hijo
if (table_features[index, 'service'] == table_features[i, 'service']){
#si el padre y el hijo son del mismo servicio, la línea es azul
lines(x_values, y_values, col = 'blue', lty = 1, lwd = 1.5)
} else{
#si el padre y el hijo son de servicios distintos, la línea es roja
lines(x_values, y_values, col = 'red', lty = 1, lwd = 1.5)
}
#para el segundo parent (es el mismo proceso, pero no todos tienen segundo parent)
if (table_features[i, 'parent2'] != ""){
index2 = which(table_features[, 'id'] %in% table_features[i, 'parent2'])
x2_values = c(times[index2], times[i])
y2_values = c(y[index2], y[i])
points(x2_values, y2_values, col='black', lwd = 0.1, pch = 20)
if (table_features[index2, 'service'] == table_features[i, 'service']){
lines(x2_values, y2_values, col = 'blue', lty = 1, lwd = 1.5)
} else{
lines(x2_values, y2_values, col = 'red', lty = 1, lwd = 1.5)
}
}
}
for (i in 1:length(unique_threads)){
rect(xleft = -5, ybottom = length(unique_threads) - i + 0.5,
xright = tail(times, n = 1) + 5, ytop = length(unique_threads) - i + 1.5,
col = colors_rgb[as.integer(color_threads[i])])
}
legend("topright",
inset=c(-0.4,0),
legend=unique_processes,
fill=colors_rgb,
title="services",
cex = 0.5)
}
plot_traces(report)
